/* ============================  app.js  ============================ */
/* -------- CONFIG -------- */
const CONTRACT_ADDRESS = "0x7887BdA9fBcE978FB4aD78e3Ef0C214104a9A224";

/* -------- ABI -------- (—É—Å–µ—á—ë–Ω –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏; —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–ª–Ω—ã–π –æ—Å—Ç–∞–≤–∏—Ç—å!) */
const ABI = [
  {
    "inputs": [],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "anonymous": false,
    "inputs": [
      { "indexed": true, "internalType": "address", "name": "apostle", "type": "address" },
      { "indexed": false, "internalType": "uint256", "name": "timestamp", "type": "uint256" }
    ],
    "name": "ApostleCreated",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      { "indexed": true, "internalType": "address", "name": "donor", "type": "address" },
      { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" },
      { "indexed": false, "internalType": "uint256", "name": "timestamp", "type": "uint256" }
    ],
    "name": "DonationReceived",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      { "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" },
      { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }
    ],
    "name": "OwnershipTransferred",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      { "indexed": true, "internalType": "address", "name": "referrer", "type": "address" },
      { "indexed": true, "internalType": "address", "name": "donor", "type": "address" },
      { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" },
      { "indexed": false, "internalType": "uint256", "name": "timestamp", "type": "uint256" }
    ],
    "name": "ReferralPayout",
    "type": "event"
  },
  {
    "inputs": [{ "internalType": "address", "name": "referrer", "type": "address" }],
    "name": "donate",
    "outputs": [],
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "donateAgain",
    "outputs": [],
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "founder",
    "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [{ "internalType": "address", "name": "user", "type": "address" }],
    "name": "hasJoined",
    "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
    "name": "isApostle",
    "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "minDonation",
    "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "owner",
    "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "paused",
    "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
    "name": "referrerOf",
    "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "renounceOwnership",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [{ "internalType": "uint256", "name": "newMin", "type": "uint256" }],
    "name": "setMinDonation",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "togglePause",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }],
    "name": "transferOwnership",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
];


const MIN_DONATION  = 0.01;                   // BNB
const SITE_URL      = "https://goapostle.com"; // –ø–æ–º–µ–Ω—è–π –Ω–∞ –¥–æ–º–µ–Ω
const CONNECT_LABEL = "1.&nbsp;Connect&nbsp;Wallet";  // –∏—Å—Ö–æ–¥–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏ Connect

/* -------- DOM -------- */
const $ = id => document.getElementById(id);
const btnConnect      = $("btnConnect");
const btnDisconnect   = $("btnDisconnect");
const step2           = $("step2");
const inputAmt        = $("amount");
const quickBtns       = document.querySelectorAll(".quick");
const btnDonate       = $("btnDonate");
const btnDonateAgain  = $("btnDonateAgain");
const btnCopy         = $("btnCopy");
const alertBox        = $("alert");
const refMsg          = $("refMsg");

/* -------- STATE ------- */
let provider, signer, contract, userAddr;

/* -------- HELPERS ----- */
function showAlert(msg, ok = true) {
  alertBox.textContent = msg;
  alertBox.className = ok
    ? "mt-6 p-4 rounded bg-green-100 text-green-800"
    : "mt-6 p-4 rounded bg-red-100 text-red-800";
  alertBox.classList.remove("hidden");
  setTimeout(() => alertBox.classList.add("hidden"), 5000);
}

// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—à–∏–±–∫–∏ –≤ ¬´—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ¬ª
function humanError(err) {
  if (err.code === 'INSUFFICIENT_FUNDS' || /insufficient funds/i.test(err.message))
    return 'You do not have enough BNB to make a donation.';
  if (err.code === 'CALL_EXCEPTION')
    return 'Transaction declined: check amount and network.';
  if (err.code === 4001) // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "Reject"
    return '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.';
  return err.reason || err.message || 'Unknown error üòï';
}

async function copy(text) {
  try {
    await navigator.clipboard.writeText(text);
  } catch {
    const ta = document.createElement("textarea");
    ta.value = text;
    ta.style.position = "fixed";
    ta.style.opacity = 0;
    document.body.appendChild(ta);
    ta.select();
    document.execCommand("copy");
    ta.remove();
  }
}
const amtBNB = () => parseFloat(inputAmt.value || "0");

/* -------- –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å ----- */
function showGratitude() {
  refMsg.classList.remove("hidden");
}

/* -------- WEB3 FLOW --- */
async function connect() {
  if (!window.ethereum)
    

// --- –Ω–æ–≤—ã–π pre-flight ---
if (!(await checkMetaMaskInstalled())) return; // –º–æ–¥–∞–ª–∫–∞ ¬´—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask¬ª
if (!(await ensureBSC())) return;              // –º–æ–¥–∞–ª–∫–∞ ¬´–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ BSC¬ª

  provider = new ethers.BrowserProvider(window.ethereum);
  signer   = await provider.getSigner();
  userAddr = await signer.getAddress();
  contract = new ethers.Contract(CONTRACT_ADDRESS, ABI, signer);

  btnConnect.textContent = `${userAddr.slice(0, 6)}‚Ä¶${userAddr.slice(-4)}`;
  btnConnect.disabled = true;
  step2.classList.remove("hidden");

  // —Ç–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∞ Disconnect –ø–æ–∫–∞–∂–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ connect()
  btnDisconnect.classList.remove("hidden");

  const joined = await contract.hasJoined(userAddr);
  if (joined) {
    btnDonate.classList.add("hidden");
    btnDonateAgain.classList.remove("hidden");
    btnCopy.classList.remove("hidden");
    showGratitude();
  }

  const refLink = `${SITE_URL}?ref=${userAddr}`;
  btnCopy.onclick = async () => {
    await copy(refLink);
    showAlert("Referral link copied!");
  };
}

async function donate(first = true) {
  if (amtBNB() < MIN_DONATION)
    return showAlert(`Minimum donation ‚Äî ${MIN_DONATION} BNB`, false);

  const ref      = new URLSearchParams(location.search).get("ref") || ethers.ZeroAddress;
  const valueWei = ethers.parseEther(amtBNB().toString());

  try {
    // –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    const balanceWei = await provider.getBalance(userAddr);
	
	
    // –∑–∞–ø–∞—Å –Ω–∞ –≥–∞–∑ (0.0005 BNB)
	const gasReserveWei = ethers.parseEther("0.0005");
	
	if (balanceWei < valueWei + gasReserveWei)
    return showAlert('You do not have enough BNB to cover the donation plus network fee.', false);

    const tx = first
      ? await contract.donate(ref,   { value: valueWei })
      : await contract.donateAgain(  { value: valueWei });

    showAlert("Transaction sent‚Ä¶");
    await tx.wait();
    showAlert("Thank you! Transaction confirmed.");

    btnDonate.classList.add("hidden");
    btnDonateAgain.classList.remove("hidden");
    btnCopy.classList.remove("hidden");
    showGratitude();
  } catch (err) {
    console.error(err);
    showAlert(humanError(err), false);
  }
}

/* -------- EVENTS ------ */
btnConnect.onclick     = connect;
inputAmt.oninput       = () => (btnDonate.disabled = amtBNB() < MIN_DONATION);
btnDonate.onclick      = () => donate(true);
btnDonateAgain.onclick = () => donate(false);
quickBtns.forEach(btn => {
  btn.onclick = () => {
    inputAmt.value = btn.textContent;
    btnDonate.disabled = false;
  };
});

/* -------- DISCONNECT LOGIC -------- */
function disconnect() {
  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  provider = signer = contract = userAddr = null;

  // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  step2.classList.add("hidden");
  btnDonate.classList.remove("hidden");   // –≤–µ—Ä–Ω—ë–º –æ–±—ã—á–Ω—É—é Donate-–∫–Ω–æ–ø–∫—É
  btnDonateAgain.classList.add("hidden");
  btnCopy.classList.add("hidden");
  refMsg.classList.add("hidden");
  alertBox.classList.add("hidden");

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ Connect
  btnConnect.innerHTML = CONNECT_LABEL;   // –≤–∞–∂–Ω–æ: innerHTML, —á—Ç–æ–±—ã &nbsp; –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–µ–ª–∞–º–∏
  btnConnect.disabled  = false;

  // –ü—Ä—è—á–µ–º Disconnect
  btnDisconnect.classList.add("hidden");

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
  inputAmt.value = "";
}

btnDisconnect.onclick = disconnect;
